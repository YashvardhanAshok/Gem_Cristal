import pyodbc
import pandas as pd
from openpyxl import load_workbook, Workbook
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils import get_column_letter
from openpyxl.worksheet.page import PageMargins
from datetime import datetime
import os

# Keywords to group by
keywords_list = ["egg", "bread", "sugar", "milk", "chapati", "dal", "onion", "rice"]

# Connect to SQL Server
conn = pyodbc.connect(
    "DRIVER={ODBC Driver 17 for SQL Server};"
    "SERVER=localhost\\SQLEXPRESS;"
    "DATABASE=gem_tenders;"
    "Trusted_Connection=yes;"
)

query = "SELECT * FROM tender_data WHERE Live = 'Yes' AND Cancel != 'Cancel'"
df = pd.read_sql(query, conn)

# Clean and drop unwanted columns
drop_cols = ['id', "Cancel", "Department", 'matches', 'matched_products', "element_put", 
             "consignee_reporting", "item_category", "date_of_search", "updated_at", 
             'file_path', 'link_href', 'Live', "extended", "L1_update", 'status', 'L_Placeholder']
df.drop(columns=[col for col in drop_cols if col in df.columns], inplace=True)
df.replace(0, '', inplace=True)

# Format tender value
def convert_to_words(val):
    try:
        val = float(val)
        if val >= 1_00_00_000:
            return f"{val / 1_00_00_000:.1f} Cr"
        elif val >= 1_00_000:
            return f"{val / 1_00_000:.1f} LPA"
        elif val > 0:
            return f"{val:.0f}"
        else:
            return ""
    except:
        return ""

tender_value_col = next((col for col in df.columns if col.lower() == "tender_value"), None)
if tender_value_col:
    df['Ten-Val Word'] = df[tender_value_col].apply(convert_to_words)

# Rename for display
df.columns = [col.replace('_', ' ').title() if col != 'day_left_formula' else 'Day Left' for col in df.columns]
if 'Tender Valu' in df.columns and 'Ten-Val Word' in df.columns:
    cols = df.columns.tolist()
    cols.remove('Ten-Val Word')
    tender_index = cols.index('Tender Valu')
    cols.insert(tender_index + 1, 'Ten-Val Word')
    df = df[cols]

# Save path

save_file = os.path.abspath(os.path.join(os.path.dirname(__file__), "xl files"))

# Create the directory if it doesn't exist
os.makedirs(save_file, exist_ok=True)

output_file = f"{save_file}/Main_By_Keyword.xlsx"
# Create new workbook
if os.path.exists(output_file):
    os.remove(output_file)
wb = Workbook()
wb.remove(wb.active)

# Excel styles
thin_border = Border(left=Side(style='thin'), right=Side(style='thin'),
                     top=Side(style='thin'), bottom=Side(style='thin'))
centered = Alignment(wrap_text=True, horizontal='center', vertical='center')
header_fill = PatternFill(start_color="bdbdbd", end_color="bdbdbd", fill_type="solid")
bold_font = Font(bold=True, size=20)
current_date = datetime.now().strftime("%Y-%m-%d %H:%M")

with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
    writer.book = wb

    for keyword in keywords_list:
        keyword = keyword.lower()
        filtered = df[df['Item Description'].str.lower().str.contains(keyword, na=False)]

        if filtered.empty:
            print(f"❌ No match found for '{keyword}'")
            continue

        sheet_name = keyword[:31].replace('/', '_')
        filtered.index = filtered.index + 1
        filtered.sort_index(inplace=True)
        filtered.to_excel(writer, sheet_name=sheet_name, index=False, startrow=1)

        ws = writer.book[sheet_name]
        max_col = ws.max_column

        # Title
        ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=max_col)
        title_cell = ws.cell(row=1, column=1)
        title_cell.value = f"Filtered – '{keyword}' on {current_date}"
        title_cell.font = Font(size=16, bold=True)
        title_cell.alignment = Alignment(horizontal="left", vertical="center")

        # Headers
        for cell in ws[2]:
            cell.fill = header_fill
            cell.font = bold_font
            cell.border = thin_border
            cell.alignment = centered

        # Data cells
        for row_idx, row in enumerate(ws.iter_rows(min_row=3, max_row=ws.max_row), start=3):
            for idx, cell in enumerate(row):
                cell.font = Font(size=20, bold=True)
                cell.border = thin_border
                cell.alignment = centered

                col_name = ws.cell(row=2, column=idx + 1).value
                if col_name == 'Day Left':
                    h_col, i_col = 'E', 'F'
                    formula = f'=IF((INDIRECT("{h_col}"&ROW())+INDIRECT("{i_col}"&ROW()))-NOW() <= 0, "CLOSED", INT((INDIRECT("{h_col}"&ROW())+INDIRECT("{i_col}"&ROW()))-NOW()) & " days")'
                    cell.value = formula

        # Column widths
        for col_idx, col_cell in enumerate(ws[2], start=1):
            col_letter = get_column_letter(col_idx)
            title = col_cell.value
            width = 35 if title in ['Item Description'] else 18
            if title in ['Qty']:
                width = 13
            elif title in ['Start Date', 'End Date', 'End Time', 'Day Left']:
                width = 18
            elif title == 'Address':
                width = 36
            ws.column_dimensions[col_letter].width = width

    wb.save(output_file)
    print(f"✅ Exported data by keywords to {output_file}")
